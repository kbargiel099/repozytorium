import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.List;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JOptionPane;



public class Marketing {

	private List<Promocja> promocje;
	private List<Ankieta> ankiety;
	private List<Ulotka> ulotki;
	private List<Produkt> aktualneProdukty;
	
	public Marketing()
	{
		 promocje = new ArrayList<Promocja>();
		 ankiety = new ArrayList<Ankieta>();
		 ulotki = new ArrayList<Ulotka>();
		 aktualneProdukty = new ArrayList<Produkt>();
	}
	
	public void utworzAnkiete(int id_ankiety, int id_produktu)
	{
		ankiety.add(new Ankieta(id_ankiety,id_produktu));
	}
	
	public void utworzPromocje(int id_promocji,Produkt produkt,String od_kiedy,String do_kiedy,double nowa_cena)
	{
		Promocja promocja = new Promocja(id_promocji,produkt,od_kiedy,do_kiedy,nowa_cena);
		promocje.add(promocja);
		aktualizujCene(promocja.pobierzIdProduktu(),promocja.pobierzNowaCene());
	}
	
	public void utworzAnkiete()
	{
		Produkt produkt = new Produkt();
		String txt;
		int tmp = 1;
		produkt = wybierzProdukt();
		Ankieta ankieta = new Ankieta(ankiety.size()+1, produkt.pobierzId());
		boolean czyKolejnePytanie = true, czyWpisanePytanie = true;
		while(czyKolejnePytanie == true)
		{
			txt = JOptionPane.showInputDialog("Wpisz pytanie");
			if(txt == null)
			{
				czyWpisanePytanie = false;
				JOptionPane.showMessageDialog(null,"Ankieta nie zosta³a utworzona");
			}
			else
				ankieta.dodajPytanie(txt);
			if(czyWpisanePytanie == true)
				tmp = JOptionPane.showConfirmDialog(null,"Czy chcesz dodaæ nastêpne pytanie", " ", JOptionPane.YES_NO_OPTION);
			if(tmp == 1)
				czyKolejnePytanie = false;
			if(czyKolejnePytanie == false && czyWpisanePytanie == true)
			{
				ankiety.add(ankieta);
				JOptionPane.showMessageDialog(null,"Ankieta zosta³a utworzona pomyœlnie");
			}
		}
	}
	
	public void utworzUlotke()
	{
		ulotki.add(new Ulotka());
	}
	
	public void utworzPromocje()
	{
		Produkt produkt;
		produkt = wybierzProdukt();
		if(produkt == null)
			JOptionPane.showMessageDialog(null,"Nie mo¿na utworzyæ promocji");
	    if((sprawdzPromocje(produkt) == true) && (produkt != null))
	    {
	    	Promocja promocja = new Promocja(promocje.size()+1,produkt);
			promocje.add(promocja);
			int indeks = wyszukaj(aktualneProdukty, promocja.pobierzIdProduktu());
			aktualizujCene(indeks,promocja.pobierzNowaCene());
			JOptionPane.showMessageDialog(null,"Promocja zosta³a utworzona pomyœlnie");
	    }
	    else
	    {
	    	if(produkt != null)
	    		JOptionPane.showMessageDialog(null,"Promocja na wybrany produkt ju¿ istnieje");	
	    }
	}
	
	public void usunAnkiete()
	{
		Ankieta ankieta;
		ankieta = wybierzAnkiete();
		ankiety.remove(ankieta);
	}
	
	public void usunPromocje(Promocja promocja)
	{
		if(promocje.contains(promocja))
		{
			promocje.remove(promocja);
			aktualizujCene(promocja.pobierzIdProduktu(),promocja.pobierzStaraCene());
		}
	}
	
	public void usunPromocje()
	{
		boolean czyZnalezionoProdukt = true;
		int indeksProdukt = -1;
		Promocja promocja;
		promocja = wybierzPromocje();
		int indeksPromocja = promocje.indexOf(promocja);
		try
		{
			indeksProdukt = wyszukaj(aktualneProdukty, promocja.pobierzIdProduktu());
		}
		catch(NullPointerException npe)
		{
			czyZnalezionoProdukt = false;
		}
		if(czyZnalezionoProdukt == true)
		{
			aktualizujCene(indeksProdukt,promocja.pobierzStaraCene());
			promocje.remove(indeksPromocja);
			JOptionPane.showMessageDialog(null,"Promocja zosta³a zakoñczona");
		}
	}
	
	public String wypiszPromocje()
	{
		return promocje.toString();
	}
	
	public String wypiszAnkiety()
	{
		return ankiety.toString();
	}
	
	private boolean sprawdzPromocje(Produkt produkt)
	{
		int i = 0;
		while(i < promocje.size())
		{
			if(promocje.get(i).pobierzIdProduktu() == produkt.pobierzId())
			{
				return false;
			}
			i++;
		}
		return true;
	}
	
	private int wyszukaj(List<Produkt> produkty, int id_produktu)
	{
		int tmp = 0;
		int i = 0;
		int test = 0;
		while (i < produkty.size())
		{
			if (produkty.get(i).pobierzId() == id_produktu)
			{
				tmp = i;
				System.out.println("Znaleziono element");
				test = 1;
			}
			i++;
		}	
		
		if(test == 0)
		{
			System.out.println("Nie ma elementu");
			return -1;
		}
		
		return tmp;
	}
	
	public void pobierzDaneProduktow(List<Produkt> produkty)
	{
		aktualneProdukty = produkty;
	}
	
	public Produkt wybierzProdukt()
	{
		if(aktualneProdukty.size() == 0)
		{
			JOptionPane.showMessageDialog(null,"Lista produktów jest pusta");
			return null;
		}
		Produkt[] tab = new Produkt[aktualneProdukty.size()];
		int i = 0;
		while(i < aktualneProdukty.size())
		{
			tab[i] = aktualneProdukty.get(i);
			i++;
		}
		Produkt produkt = (Produkt)JOptionPane.showInputDialog(null,"Wybierz produkt", "",JOptionPane.PLAIN_MESSAGE,null,tab,tab[0]);
		return produkt;
	}
	
	private Promocja wybierzPromocje()
	{
		if(promocje.size() == 0)
		{
			JOptionPane.showMessageDialog(null,"Lista istniej¹cych promocji jest pusta");
			return null;
		}
		Promocja[] tab = new Promocja[promocje.size()];
		int i = 0;
		while(i < promocje.size())
		{
			tab[i] = promocje.get(i);
			i++;
		}
		Promocja promocja = (Promocja)JOptionPane.showInputDialog(null,"Wybierz promocjê", "",JOptionPane.PLAIN_MESSAGE,null,tab,tab[0]);
		return promocja;
	}
	
	public Ankieta wybierzAnkiete()
	{
		if(ankiety.size() == 0)
		{
			JOptionPane.showMessageDialog(null,"Lista ankiet jest pusta");
			return null;
		}
		String[] tab = new String[ankiety.size()];
		int i = 0;
		while(i < ankiety.size())
		{
			int indeksProdukt = wyszukaj(aktualneProdukty,ankiety.get(i).pobierzIdProduktu());
			tab[i] = "Id ankiety: "+ankiety.get(i).pobierzIdAnkiety()+"    (Produkt: "+aktualneProdukty.get(indeksProdukt).pobierzNazwe()+")";
			i++;
		}
		String txt = (String)JOptionPane.showInputDialog(null,"Wybierz ankietê", "",JOptionPane.PLAIN_MESSAGE,null,tab,tab[0]);
		String indeks = new String("");
		i = 12;
		while(txt.charAt(i) != ' ')
		{
			indeks = new String(indeks+txt.charAt(i));
			i++;
		}
		i = Integer.parseInt(indeks) - 1;
		return ankiety.get(i);
	}

	private void aktualizujCene(int indeks, double cena)
	{
		aktualneProdukty.get(indeks).ustawCene(cena);
		JOptionPane.showMessageDialog(null,"Cena produktu zosta³a zaktualizowana");
	}
	
	public List<Promocja> pobierzListePromocji()
	{
		return promocje;
	}
	
	public List<Ankieta> pobierzListeAnkiet()
	{
		return ankiety;
	}
	
}
